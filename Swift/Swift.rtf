{\rtf1\ansi\ansicpg949\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset129 AppleSDGothicNeo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww29740\viewh15780\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs72 \cf0 \'c0\'d4\'b7\'c2
\f1\b0\fs24 \

\fs32 Int(readLine()!)!\
readLine()!.split(separator: " ").map\{Int(String($0))!\}\
Array(repeating : [Int](),count:N+1)\
\

\f0\b\fs72 \'c3\'e2\'b7\'c2
\f1\b0\fs32 \
print( \'93something\'94 , terminator: \'93\'94)\
\pard\tx791\pardeftab791\partightenfactor0
\cf0 print( arr.joined(separator: \'93 \'93) )\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs72 \cf0 \'c3\'d6\'b4\'eb&\'c3\'d6\'bc\'d2
\f1\b0\fs32 \
\pard\tx791\pardeftab791\partightenfactor0
\cf0 Int.max\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs72 \cf0 \'b0\'aa \'b1\'b3\'c8\'af\

\f1\b0\fs32 ( str1, str2 ) = ( str2, str1 )\
\pard\tx791\pardeftab791\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs72 \cf0 \'b9\'ae\'c0\'da\'bf\'ad
\f1\b0\fs32 \
\pard\tx791\pardeftab791\partightenfactor0

\f2 \cf0 \'b9\'ae\'c0\'da\'bf\'ad\'c0\'ba
\f1  
\f2 \'c0\'ce\'b5\'a6\'bd\'ba\'b7\'ce
\f1  
\f2 \'c1\'a2\'b1\'d9\'c7\'d2
\f1  
\f2 \'bc\'f6
\f1  
\f2 \'be\'f8\'b4\'d9
\f1 \
String(repeating: \'930\'94, count: 5)\

\f2 \'c0\'af\'b4\'cf\'c4\'da\'b5\'e5\'b7\'ce
\f1  
\f2 \'ba\'af\'c8\'af
\f1 \
for i in str.unicodeScalars \{\
	Int(i.value))\
\}\

\f2 \'b9\'ae\'c0\'da\'b7\'ce
\f1  
\f2 \'ba\'af\'c8\'af
\f1 \
Charater(UnicodeScalar(int)!)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs72 \cf0 \'b9\'e8\'bf\'ad
\f1\b0\fs32 \
[Int](repeating: 0, count: 10)\
\pard\tx791\pardeftab791\partightenfactor0
\cf0 Arr = Arr.sorted\{ ($0[1], $0[0] ) < ($1[1], $1[0] ) \}\
Arr = Array<Int>(0\'85N)\
Total = Arr.reduce(0, +)\
arr.max()!\
Arr.reversed() => O(1)\
arr.firstIndex(of: )!\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs72 \cf0 \'bb\'e7\'c0\'fc\

\f1\b0\fs32 dict[key] = dic[key, default: 0]\
dic.removeValue(forKey: key)\
\

\f0\b\fs72 Node or Tree
\f1\b0\fs32 \
class Node \{\
	var pre: Node?\
	var val: Int?\
	var next: Node?\
\
	init(_ pre: Node? = nil, _ val: Int, _ next: Node? = nil) \{\
		self.pre = Node\
		self.val = val\
		self.next = Node\
	\}\
\}\
\
class Tree \{\
	var left: String\
	var right: String\
    \
	init(_ left: String, _ right: String) \{\
		self.left = left\
		self.right = right\
	\}\
\}}